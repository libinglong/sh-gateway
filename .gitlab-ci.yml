# 该脚本用于gitlab的pipeline,如果不适用pipeline的话,可以忽略.
stages:
  - package
  - sonar
  - build
#  - deploy

before_script:
  - git submodule sync --recursive
  - git submodule update --init --recursive

variables:
  MAVEN_OPTS: "-Dmaven.repo.local=$CI_PROJECT_DIR/.m2/repository"
#  JAVA_OPTS1: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7003"
#  JAVA_OPTS2: "-agentlib:jdwp=transport=dt_socket,server=y,suspend=n,address=7004"
  docker_server: harbor.mrd.sohuno.com
  image_latest: harbor.mrd.sohuno.com/smc-gateway/smc-gateway:latest
  image_name: harbor.mrd.sohuno.com/smc-gateway/smc-gateway:$CI_BUILD_REF
#  使用docker执行构建,如果拉取的镜像来源是私服,则需要加权限认证
#  DOCKER_AUTH_CONFIG: "{\"auths\":{\"10.16.12.204\":{\"auth\":\"YmluZ2xvbmdsaTpMaWJpbmdsb25nMTIz\"}}}"
cache:
  key: key-for-all-1
  paths:
    - .m2/repository
    - .sonar/cache
mvn:package:
  stage: package
  tags:
    - smc-gateway
  image: maven:3.6.3-openjdk-11
  artifacts:
    paths:
    - target/app.jar
  script:
    - mvn package -Dmaven.test.skip=true --settings $CI_PROJECT_DIR/conf/settings.xml -U

sonarqube-check:
  stage: sonar
  tags:
    - smc-gateway
  image: maven:3.6.3-openjdk-11
  variables:
    SONAR_USER_HOME: "${CI_PROJECT_DIR}/.sonar"  # Defines the location of the analysis task cache
#    GIT_DEPTH: "0"  # Tells git to fetch all the branches of the project, required by the analysis task
    SONAR_HOST_URL: http://10.16.12.206:30900
  script:
    - mvn verify sonar:sonar -Dsonar.qualitygate.wait=true --settings $CI_PROJECT_DIR/conf/settings.xml
  allow_failure: true
  only:
    - merge_requests
    - master
    - develop

docker:build:
  stage: build
  tags:
    - smc-gateway
  image: harbor.mrd.sohuno.com/library/docker:19.03.1
#  image: 10.16.12.204/smc-gateway/local-docker:1.0
  before_script:
#    由于和宿主机共用一个docker的server端,宿主机需要配置insecure-registries,开启http支持
    - docker login -u 'robot$smc' -p 'eyJhbGciOiJSUzI1NiIsInR5cCI6IkpXVCJ9.eyJleHAiOjE5MjIxNzcwMzAsImlhdCI6MTYwNjgxNzAzMCwiaXNzIjoiaGFyYm9yLXRva2VuLWRlZmF1bHRJc3N1ZXIiLCJpZCI6MywicGlkIjozLCJhY2Nlc3MiOlt7IlJlc291cmNlIjoiL3Byb2plY3QvMy9yZXBvc2l0b3J5IiwiQWN0aW9uIjoicHVzaCIsIkVmZmVjdCI6IiJ9XX0.UVD2kg5xX00vfWxxAVOxRfFYRAF06g7TiLTNKE3-jtGgurBi4Vht_3taF7bwnmFNVotSkb08K3VI1ANKDh-SiRRaqs6lKRl_FlJ-IKDoRk9uVL-gMzy_IFkX5tFlwgQA69TrqzUGpVjBLX_K9qhXqf8q3MZezinQ1mKLpt2wdC_sAuFPsjInP4GNEAVtPpHYXey32uBsm-vL-AiflM0AoNqjEfV6wKQzobIAAGVB3M57vmueJChoU7RSd0CAjeERqTCQiww4Jz2RAQiy-EXOSbioyTWi6vQtysZTr1dYTyxhFkVTzgDk4goJVqBcYOvt-Q54rgwKmiIlv0BDOJBMC4lHS3iC2NUN28gZPGAQpwKwasnRvcAi0pWNunn5-Rf_NlVWbyMuEOiJore9YjnmxCNQucI3VplMZLz0v0lVJnPHZ6KQ5Mfyizu4HiMiekyUncWNzVvEUJAU6EXMWCGeyyTbO9SoQOwvkb2eZD0Gy7WB-qiByXb2FaJTjfth1QDgs6SBh9IqQRIzWk1uufAQQe68-iXxYeIPVkZZ3NCN_UPL6nbdvsX0u3ux22ixwkb_XjtMBvHD_tHaUaq8_KdRbeTmI8he6qPaYBAjpPNH4f96QWupsQSdskYxEhiz9gFAZAY-mYghDJ4yxeVxoBa_yL2iqu6DICZPQojUHYEFWDE' ${docker_server}
  script:
#    - export
#    低版本不支持 https://docs.gitlab.com/ee/ci/variables/predefined_variables.html
# 最后的"."表示当前目录
    - docker build --tag $image_name --tag $image_latest .
    - docker push ${image_latest}
    - docker push ${image_name}

# 部署由运维接管
#docker:deploy:
#  stage: deploy
#  tags:
#    - config-server
#  image: docker:19.03.1
#  script:
#    - docker container stop $APP_NAME1 || true
#    - docker container rm $APP_NAME1 || true
#    - docker run -m 512M -d --network=host --restart=always --name=$APP_NAME1 -e JAVA_OPTS="$JAVA_OPTS_COMMON $JAVA_OPTS1" $image_name
#    - docker container stop $APP_NAME2 || true
#    - docker container rm $APP_NAME2 || true
#    - docker run -m 512M -d --network=host --restart=always --name=$APP_NAME2 -e JAVA_OPTS="$JAVA_OPTS_COMMON $JAVA_OPTS2" $image_name